SELECT * FROM CUSTOMERINFO
SELECT * FROM PRODUCTINFO
SELECT * FROM ORDERDETAIL
SELECT * FROM COUNTERS

USE SHOP

CREATE OR ALTER PROCEDURE PLACEORDER 
(
	@CUSTOMERID VARCHAR(16) , 
	@PRODUCTID INT , 
	@QUANTITY INT , 
	@ORDERID INT OUTPUT
)
AS
BEGIN
	BEGIN TRANSACTION
		UPDATE COUNTERS SET CURRENTVALUE = CURRENTVALUE + 1 WHERE ID = 'ORDER'
		SELECT @ORDERID = SEEDVALUE + CURRENTVALUE FROM COUNTERS WHERE ID = 'ORDER'
		INSERT INTO ORDERDETAIL VALUES(@ORDERID , GETDATE() , @CUSTOMERID , @PRODUCTID , @QUANTITY)
		IF @@ERROR = 0	
			COMMIT TRANSACTION
		ELSE
			BEGIN
				ROLLBACK TRANSACTION
				SET @ORDERID = 0
			END
END

BEGIN
	DECLARE @ORDERNO INT 
	EXEC PLACEORDER 'CU201',202,3,@ORDERNO OUTPUT
END




-- SCALARED FUCNTION
CREATE OR ALTER FUNCTION GETPRICEBYPRODUCTID(@PID INT) 
RETURNS MONEY
AS 
BEGIN
	DECLARE @PRICE MONEY
	SELECT @PRICE = PRICE FROM PRODUCTINFO WHERE PRODUCTNO = @PID
	RETURN @PRICE
END

SELECT DBO.GETPRICEBYPRODUCTID(202);


-- TABLED FUNCTIONS
CREATE OR ALTER FUNCTION GETPRODUCTSBYSTOCK(@STOCK INT)
RETURNS TABLE
AS
RETURN SELECT PRODUCTNO,PRICE,STOCK FROM PRODUCTINFO WHERE STOCK>@STOCK;

SELECT * FROM DBO.GETPRODUCTSBYSTOCK(40);


-- TRIGGERS

SELECT * INTO ORDER_DELETED FROM OrderDetail WHERE ORDERNO > 2003
DROP TABLE ORDER_DELETED 
SELECT * FROM ORDER_DELETED
DELETE FROM ORDER_DELETED

CREATE OR ALTER TRIGGER TRG_ORDER_DELETED
ON ORDERDETAIL
AFTER DELETE 
AS
BEGIN
	INSERT INTO ORDER_DELETED
	SELECT * FROM DELETED
END

DELETE FROM ORDERDETAIL WHERE ORDERNO= 2002



-- COMMON TABLE EXPRESSIONS (CTE)
-- TEMPERORY RESULT SET WHICH IS USED ON PARTICUALR QUERY FOR SPECIFIC PURPOSES
-- ONCE THE RELATED QUERY IS FIRED THE CTE NO MORE EXISTS

USE payroll

WITH AVERAGECOUNT AS (
	SELECT DEPTNO,COUNT(*) "EMP_COUNT" FROM EMP WHERE YEAR(HIREDATE)='1981' GROUP BY DEPTNO
)SELECT AVG(EMP_COUNT) FROM AVERAGECOUNT

WITH AVERAGESALARYDEPT AS (
	SELECT DEPTNO,AVG(SAL) "DEPTAVGSAL" FROM EMP GROUP BY DEPTNO
)SELECT * FROM EMP 
INNER JOIN 
AVERAGESALARYDEPT ON EMP.DEPTNO = AVERAGESALARYDEPT.DEPTNO 
WHERE EMP.SAL > AVERAGESALARYDEPT.DEPTAVGSAL 



-- NORMALISATION

--  EMPNO	ENAME	JOB		HIREDATE	SAL	DEPTNO	DNAME		DLOC
--  1		ADI		TESTER	2024-17-01	5.5		3   SELENIUUM	hyderabad
--  2		PRANAV	SQL		2024-14-01	6.5		4   DATABASE	MUMBAI
--  3		PARTH	BACKEND	2024-17-01	7.5		5   API			CHENNAI
--  4		TIRTH	TESTER	2024-12-12	4.5		3	SELENIUM	DELHI

-- INSERTION ANAMOLY  
INSERT INTO EMP VALUES (1'PUSH','TESTER','20203-383022',4.6,3,SELENIUM,'BOMABAY')	-- DEPARTMENT DETAILS REMAINS SAME 
-- UPDATEION ANAMOLY	 
UPDATE EMP SET DNAME='TESTING' WHERE DNAME='SELENIUM'		-- UPDATING 2 TIMES IN TABLE

-- 1NF -> EVERY CELL ATOMIC VALUES
-- EG: NAME -> FIRSTNAME , LASTNAME 
-- 2NF -> MUST FOLLOW 1NF
--		-> IDENTIFY PRIMARY KEY , IF NOT MAKE ONE
--		-> TAKE PRIMARY KEY AND SEE IF ITS CORRELATES WITH EVERY COLUMN IF NOT BIFURCATE
-- EG: EMPNO CORRELATES WITH ENAME , JOB ,.... BUT NOT WITH DNAME , DLOC WHICH CORRLATES WITH DEPTNO
-- 3NF -> 




-- ASSIGNMENT

--8) Create a CTE to find the total number of orders placed by each customer.
WITH ORDERBYCUSTOMER AS (
	SELECT CUSTOMERID,COUNT(*) "ORDERCOUNT" FROM ORDERDETAIL GROUP BY CUSTOMERID
) SELECT CUSTOMERINFO.USERNAME,ORDERBYCUSTOMER.ORDERCOUNT FROM CUSTOMERINFO 
INNER JOIN ORDERBYCUSTOMER 
ON CUSTOMERINFO.USERNAME = ORDERBYCUSTOMER.CUSTOMERID

--9) Create a CTE to calculate the total quantity of products ordered by each customer.
WITH QUANTITYORDERBYCUSTOMER AS (
	SELECT CUSTOMERID,SUM(QUANTITY) "TOTALQUANTITY" FROM ORDERDETAIL GROUP BY CUSTOMERID
) SELECT CUSTOMERINFO.USERNAME,QUANTITYORDERBYCUSTOMER.TOTALQUANTITY FROM CUSTOMERINFO 
INNER JOIN QUANTITYORDERBYCUSTOMER 
ON CUSTOMERINFO.USERNAME = QUANTITYORDERBYCUSTOMER.CUSTOMERID

--10) Create a CTE to find customers who have placed orders with a total quantity above 50.
WITH QUANTITYGREAT50 AS (
	SELECT CUSTOMERID FROM ORDERDETAIL GROUP BY CUSTOMERID HAVING SUM(QUANTITY) > 10
) SELECT CUSTOMERINFO.USERNAME FROM CUSTOMERINFO 
INNER JOIN QUANTITYGREAT50 
ON CUSTOMERINFO.USERNAME = QUANTITYGREAT50.CUSTOMERID

--11) Create a CTE to find customers who have placed more than one order on a single day.
WITH MORETHAN1ORDER AS (
	SELECT CUSTOMERID  FROM ORDERDETAIL GROUP BY CUSTOMERID , ORDERDATE HAVING COUNT(*) > 1
) SELECT * FROM MORETHAN1ORDER

--12) Create a CTE to calculate the total quantity ordered by each customer for each month.
WITH TOTQUANTITYORDEREACHMONTH AS (
	SELECT CUSTOMERID ,SUM(QUANTITY) "TOTALQUANTITY" FROM ORDERDETAIL GROUP BY CUSTOMERID,MONTH(ORDERDATE)
) SELECT * FROM TOTQUANTITYORDEREACHMONTH

--13) Create a CTE to calculate the average quantity of products ordered for each customer.
WITH AVGQUANTITYCUST AS (
	SELECT CUSTOMERID ,AVG(QUANTITY) "AVGQUANTITY" FROM ORDERDETAIL GROUP BY CUSTOMERID
) SELECT * FROM AVGQUANTITYCUST 

--14) Create a CTE to find the top 5 customers who have ordered the most quantity of products.
WITH TOP5CUSTBYQUANTITY AS (
	SELECT CUSTOMERID , SUM(QUANTITY) "TOTALQUANTITY" FROM ORDERDETAIL GROUP BY CUSTOMERID
) SELECT TOP 5 CUSTOMERINFO.USERNAME , TOP5CUSTBYQUANTITY.TOTALQUANTITY FROM CUSTOMERINFO 
INNER JOIN TOP5CUSTBYQUANTITY
ON CUSTOMERINFO.USERNAME = TOP5CUSTBYQUANTITY.CUSTOMERID 
ORDER BY TOTALQUANTITY DESC
 
--15) Create a CTE to list all orders placed within the last 30 days.
WITH ORDERPLACEDWITHIN30 AS (
	SELECT ORDERNO , ORDERDATE FROM ORDERDETAIL 
) SELECT ORDERNO , ORDERDATE FROM ORDERPLACEDWITHIN30 WHERE DATEDIFF(DY,ORDERDATE,GETDATE()) <= 30

