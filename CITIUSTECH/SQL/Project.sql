CREATE DATABASE BANK

USE BANK 

CREATE TABLE CUSTOMERS (
	CUSTID INT NOT NULL,
	CUSTNAME VARCHAR(50) NOT NULL,
	CUSTADDRESS VARCHAR(100),
	CUSTPHONE CHAR(10),
	CUSTEMAIL VARCHAR(30) NOT NULL UNIQUE,
	CUSTDOB DATE NOT NULL,
	CUSTACCOPEN DATE NOT NULL,
	CONSTRAINT PK_CUSTOMER_CUSTID PRIMARY KEY(CUSTID),
);

CREATE TABLE ACCOUNTS (
	ACCID INT NOT NULL,
	CUSTID INT NOT NULL,
	ACCTYPE VARCHAR(10) NOT NULL CHECK ([ACCTYPE] IN ('SAVINGS','CURRENT')) DEFAULT 'SAVINGS',
	ACCBAL MONEY ,
	ACCOPEN DATE NOT NULL,
	CONSTRAINT PK_ACCOUNT_ACCID PRIMARY KEY(ACCID),
	CONSTRAINT FK_ACCOUNT_CUSTID FOREIGN KEY(CUSTID) REFERENCES CUSTOMERS(CUSTID),
	CONSTRAINT CK_ACCOUNT_ACCBAL CHECK (ACCBAL > 0)
);

CREATE TABLE TRANSACTIONS (
	TRANSID INT NOT NULL,
	ACCID INT NOT NULL,
	TRANSTYPE VARCHAR(10) NOT NULL CHECK ([TRANSTYPE] IN ('DEPOSIT','WITHDRAWAL','TRANSFER')) DEFAULT 'CASH',
	TRANSAMT MONEY NOT NULL,
	TRANSDATE DATE NOT NULL,
	CONSTRAINT PK_TRANSACTION_TRANSID PRIMARY KEY(TRANSID),
	CONSTRAINT FK_TRANSACTION_ACCID FOREIGN KEY (ACCID) REFERENCES ACCOUNTS (ACCID),
)

CREATE TABLE LOANS (
	LOANID INT NOT NULL,
	CUSTID INT NOT NULL,
	LOANTYPE VARCHAR(10) NOT NULL CHECK ([LOANTYPE] IN ('HOME','AUTO','PERSONAL')) DEFAULT 'HOME',
	LOANAMT MONEY NOT NULL,
	LOANINTEREST MONEY NOT NULL,
	LOANSTART DATE NOT NULL,
	LOANEND DATE NOT NULL,
	CONSTRAINT PK_LOAN_LOANID PRIMARY KEY (LOANID),
	CONSTRAINT FK_LOAN_CUSTID FOREIGN KEY (CUSTID) REFERENCES CUSTOMERS (CUSTID),
	CONSTRAINT CK_LOAN_DATE CHECK (LOANSTART <= LOANEND)
)

CREATE TABLE BRANCH (
	BRANCHID INT NOT NULL,
	BRANCHNAME VARCHAR(20) NOT NULL,
	BRANCHADD TEXT NOT NULL,
	BRANCHPHONE VARCHAR(12) NOT NULL,
	CONSTRAINT PK_BRANCH_BRANCHID PRIMARY KEY (BRANCHID),
)

CREATE TABLE ACCOUNTBRANCHES (
	ACCBRANCHID INT NOT NULL,
	ACCID INT NOT NULL,
	BRANCHID INT NOT NULL,
	CONSTRAINT PK_ACCOUNTBRANCHES_ACCBRANCHID PRIMARY KEY (ACCBRANCHID),
	CONSTRAINT FK_ACCOUNTBRANCHES_ACCID FOREIGN KEY (ACCID) REFERENCES ACCOUNTS (ACCID),
	CONSTRAINT FK_ACCOUNTBRANCHES_BRANCHID FOREIGN KEY (BRANCHID) REFERENCES BRANCH (BRANCHID),
)

CREATE TABLE COUNTERTABLE (
	COUNTTYPE VARCHAR(20) NOT NULL,
	SEEDVALUE INT NOT NULL,
	COUNTVALUE INT NOT NULL
)

DROP TABLE COUNTERTABLE

INSERT INTO COUNTERTABLE VALUES ('CUSTOMER',10000,0);
INSERT INTO COUNTERTABLE VALUES ('ACCOUNT',20000,0);
INSERT INTO COUNTERTABLE VALUES ('TRANSACTION',30000,0);
INSERT INTO COUNTERTABLE VALUES ('LOAN',40000,0);
INSERT INTO COUNTERTABLE VALUES ('BRANCH',50000,0);
INSERT INTO COUNTERTABLE VALUES ('ACCBRANCHES',60000,0);


--3. Stored Procedures

-- add  branch
CREATE OR ALTER PROCEDURE MAKE_BRANCH 
(
    @BRANCHNAME VARCHAR(20),
    @BRANCHADD TEXT,
    @BRANCHPHONE VARCHAR(12),
    @BRANCHID INT OUTPUT
)
AS 
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
            UPDATE COUNTERTABLE SET COUNTVALUE = COUNTVALUE + 1 WHERE COUNTTYPE = 'BRANCH';
            SELECT @BRANCHID = SEEDVALUE + COUNTVALUE FROM COUNTERTABLE WHERE COUNTTYPE = 'BRANCH';
            INSERT INTO BRANCH (BRANCHID, BRANCHNAME, BRANCHADD, BRANCHPHONE)
            VALUES (@BRANCHID, @BRANCHNAME, @BRANCHADD, @BRANCHPHONE);
            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @BRANCHID = 0;
        SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
    END CATCH;
END;

-- BRANCH ADDING
BEGIN
	DECLARE @BRANCHID INT;
	EXEC MAKE_BRANCH 'NERUL','NEAR NERUL STATION',0239485032,@BRANCHID;
END

-- add account
CREATE OR ALTER PROCEDURE ADD_ACCOUNT
(
    @CUSTID INT,
    @ACCBAL MONEY,
    @ACCTYPE VARCHAR(10),
    @BRANCHID INT,
    @ACCID INT OUTPUT,
    @ACCBRANCHID INT OUTPUT
)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION

            IF NOT EXISTS (SELECT 1 FROM BRANCH WHERE BRANCHID = @BRANCHID)
            BEGIN
                RAISERROR ('ERROR: BRANCH DOES NOT EXIST', 16, 1);
                ROLLBACK TRANSACTION;
                RETURN;
            END

            IF @ACCBAL <= 0
            BEGIN
                RAISERROR ('ERROR: MUST HAVE MINIMUM ACCOUNT BALANCE', 16, 1);
                ROLLBACK TRANSACTION;
                RETURN;
            END

            IF @ACCTYPE NOT IN ('SAVINGS','CURRENT')
            BEGIN
                RAISERROR ('ERROR: INVALID ACCOUNT TYPE', 16, 1);
                ROLLBACK TRANSACTION;
                RETURN;
            END

            UPDATE COUNTERTABLE SET COUNTVALUE = COUNTVALUE + 1 WHERE COUNTTYPE = 'ACCOUNT';
            SELECT @ACCID = SEEDVALUE + COUNTVALUE FROM COUNTERTABLE WHERE COUNTTYPE = 'ACCOUNT';

            UPDATE COUNTERTABLE SET COUNTVALUE = COUNTVALUE + 1 WHERE COUNTTYPE = 'ACCBRANCHES';
            SELECT @ACCBRANCHID = SEEDVALUE + COUNTVALUE FROM COUNTERTABLE WHERE COUNTTYPE = 'ACCBRANCHES';

            INSERT INTO ACCOUNTS (ACCID, CUSTID, ACCTYPE, ACCBAL, ACCOPEN)
            VALUES (@ACCID, @CUSTID, @ACCTYPE, @ACCBAL, GETDATE());

            INSERT INTO ACCOUNTBRANCHES (ACCBRANCHID, ACCID, BRANCHID)
            VALUES (@ACCBRANCHID, @ACCID, @BRANCHID);

            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @ACCID = 0;
        SET @ACCBRANCHID = 0;
        SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
    END CATCH;
END;


-- addcustomer
CREATE OR ALTER PROCEDURE ADD_CUSTOMER 
(
    @CUSTNAME VARCHAR(50),
    @CUSTADDRESS TEXT,
    @CUSTPHONE CHAR(10),
    @CUSTEMAIL VARCHAR(30),
    @CUSTDOB DATE,
    @CUSTID INT OUTPUT,
    @ACCBAL MONEY,
    @ACCTYPE VARCHAR(10),
    @BRANCHID INT
)
AS
BEGIN 
    BEGIN TRY
        BEGIN TRANSACTION
            UPDATE COUNTERTABLE SET COUNTVALUE = COUNTVALUE + 1 WHERE COUNTTYPE = 'CUSTOMER';
            SELECT @CUSTID = SEEDVALUE + COUNTVALUE FROM COUNTERTABLE WHERE COUNTTYPE = 'CUSTOMER';
            IF NOT EXISTS (SELECT 1 FROM CUSTOMERS WHERE CUSTEMAIL = @CUSTEMAIL)
				BEGIN
					INSERT INTO CUSTOMERS (CUSTID, CUSTNAME, CUSTADDRESS, CUSTPHONE, CUSTEMAIL, CUSTDOB, CUSTACCOPEN)
					VALUES (@CUSTID, @CUSTNAME, @CUSTADDRESS, @CUSTPHONE, @CUSTEMAIL, @CUSTDOB, GETDATE());
                
					DECLARE @ACCID INT, @ACCBRANCHID INT;
					EXEC ADD_ACCOUNT @CUSTID, @ACCBAL, @ACCTYPE, @BRANCHID, @ACCID OUTPUT, @ACCBRANCHID OUTPUT;
				END
            ELSE
				BEGIN
					RAISERROR('ERROR: USER ALREADY EXISTS', 16, 1);
					ROLLBACK TRANSACTION;
					RETURN;
				END
            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @CUSTID = 0;
        SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
    END CATCH;
END;

BEGIN
    DECLARE @CUSTID INT;
    EXEC ADD_CUSTOMER 'TIRTH', 'BELAPUR NAVI UMBAI', '9869448393', 
    'TIR@GMAIL.COM', '2012-05-12', @CUSTID OUTPUT, 10000,'SAVINGS',50001;
END;



--   - Create a stored procedure to perform a deposit or withdrawal transaction.
CREATE OR ALTER PROCEDURE PERFORM_TRANSACTION 
(
	@CUSTID INT,
	@ACCID INT,
	@ACCTYPE VARCHAR(10),
	@TRANSTYPE VARCHAR(10),
	@TRANSAMT MONEY,
	@TRANSID INT OUTPUT
)
AS 
BEGIN 
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE COUNTERTABLE SET COUNTVALUE = COUNTVALUE + 1 WHERE COUNTTYPE = 'TRANSACTION';
            SELECT @TRANSID = SEEDVALUE + COUNTVALUE FROM COUNTERTABLE WHERE COUNTTYPE = 'TRANSACTION';

            IF EXISTS (SELECT 1 FROM CUSTOMERS 
						INNER JOIN ACCOUNTS ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID 
						WHERE CUSTOMERS.CUSTID = @CUSTID AND ACCOUNTS.ACCID = @ACCID AND ACCOUNTS.ACCTYPE = @ACCTYPE)
				BEGIN
					INSERT INTO TRANSACTIONS VALUES (@TRANSID,@ACCID,@TRANSTYPE,@TRANSAMT,GETDATE())
				END
            ELSE
                BEGIN
					RAISERROR('ERROR: USER ACCOUNT DOESNT EXISTS', 16, 1);
					ROLLBACK TRANSACTION;
					RETURN;
				END

            COMMIT TRANSACTION; 
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION;
        SET @TRANSID = 0;
        SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
	END CATCH
END

-- ADDING TRANSCTION
BEGIN 
	DECLARE @TRANSID INT;
	EXEC PERFORM_TRANSACTION 10001,20001,'SAVINGS','WITHDRAWAL',20000,@TRANSID OUTPUT;
END

SELECT * FROM ACCOUNTS

-- Create a stored procedure to transfer funds between accounts.
CREATE OR ALTER PROCEDURE MAKE_PAYMENT 
(
    @SENDERACCID INT,
    @RECIEVERACCID INT,
    @TRANSAMT MONEY
)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
            UPDATE ACCOUNTS SET ACCBAL = ACCBAL - @TRANSAMT WHERE ACCID = @SENDERACCID;
            UPDATE ACCOUNTS SET ACCBAL = ACCBAL + @TRANSAMT WHERE ACCID = @RECIEVERACCID;
            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        PRINT 'ERROR OCCURRED';
    END CATCH
END;


CREATE OR ALTER PROCEDURE TRANSFER_FUNDS 
(
    @SENDERID INT,
    @SENDERACCID INT,
    @RECIEVERACCID INT,
    @TRANSAMT MONEY,
    @TRANSID INT OUTPUT
)
AS 
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
            UPDATE COUNTERTABLE SET COUNTVALUE = COUNTVALUE + 1 WHERE COUNTTYPE = 'TRANSACTION';
            SELECT @TRANSID = SEEDVALUE + COUNTVALUE FROM COUNTERTABLE WHERE COUNTTYPE = 'TRANSACTION';

            IF NOT EXISTS (SELECT 1 FROM ACCOUNTS WHERE ACCID = @SENDERACCID AND CUSTID = @SENDERID)
            BEGIN
                RAISERROR ('ERROR: ACCOUNT NOT YOURS', 16, 1);
                ROLLBACK TRANSACTION;
                RETURN;
            END

            IF NOT EXISTS (SELECT 1 FROM ACCOUNTS WHERE ACCID = @RECIEVERACCID)
            BEGIN
                RAISERROR ('ERROR: ACCOUNT DOESN''T EXIST', 16, 1);
                ROLLBACK TRANSACTION;
                RETURN;
            END

			INSERT INTO TRANSACTIONS VALUES (@TRANSID,@SENDERACCID,'TRANSFER',@TRANSAMT,GETDATE());
			INSERT INTO TRANSACTIONS VALUES (@TRANSID+FLOOR(RAND()*(12345-2345+1)+2345),@RECIEVERACCID,'DEPOSIT',@TRANSAMT,GETDATE());
			
            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @TRANSID = 0;
        SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
    END CATCH
END;


BEGIN
	DECLARE @TRANSID INT;
	EXEC TRANSFER_FUNDS 10001,20001,20003,3000,@TRANSID OUTPUT;
END



--  Create a stored procedure to apply for a loan.
CREATE OR ALTER PROCEDURE APPLY_LOAN 
(
    @LOANAPPLICANTID INT,
    @LOANTYPE VARCHAR(10),
    @LOANAMT MONEY,
    @LOANSTART DATE,
    @LOANEND DATE,
    @LOANID INT OUTPUT
)
AS 
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
            UPDATE COUNTERTABLE SET COUNTVALUE = COUNTVALUE + 1 WHERE COUNTTYPE = 'LOAN';
            SELECT @LOANID = SEEDVALUE + COUNTVALUE FROM COUNTERTABLE WHERE COUNTTYPE = 'LOAN';

            IF NOT EXISTS (SELECT 1 FROM CUSTOMERS WHERE CUSTID = @LOANAPPLICANTID)
            BEGIN
                RAISERROR ('ERROR: CUSTOMER DOESN''T EXIST', 16, 1);
                ROLLBACK TRANSACTION;
                RETURN;
            END

            IF @LOANEND <= @LOANSTART OR @LOANSTART < GETDATE()
            BEGIN
                RAISERROR ('ERROR: INVALID LOAN DAES', 16, 1);
                ROLLBACK TRANSACTION;
                RETURN;
            END

            DECLARE @LOANINTEREST MONEY;
            SET @LOANINTEREST = CASE
                                    WHEN @LOANTYPE = 'HOME' THEN 0.08
                                    WHEN @LOANTYPE = 'AUTO' THEN 0.05
                                    ELSE 0.04
                                END;

            INSERT INTO LOANS VALUES (@LOANID, @LOANAPPLICANTID, @LOANTYPE, @LOANAMT, @LOANAMT * @LOANINTEREST, @LOANSTART, @LOANEND);

            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SET @LOANID = 0;
        SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
    END CATCH
END;


BEGIN
    DECLARE @LOANID INT;
    EXEC APPLY_LOAN 10002, 'PERSONAL', 1000, '2024-12-11', '2026-10-23', @LOANID OUTPUT;
    SELECT @LOANID AS LOANID;
END;



--4. Stored Functions

--   - Create a function to calculate the total balance of all accounts for a given customer.
BEGIN
	DECLARE @ACCID INT , @ACCBRANCHID INT;
	EXEC ADD_ACCOUNT 10001,1000,'CURRENT',50001,@ACCID OUTPUT,@ACCBRANCHID OUTPUT;
END

CREATE OR ALTER FUNCTION GETTOTALBAL(@CUSTOMERID INT) 
RETURNS MONEY
AS
BEGIN
	DECLARE @ACCBAL MONEY, @TOTALBAL MONEY = 0;

	DECLARE CUR_BAL CURSOR FOR SELECT ACCBAL FROM ACCOUNTS WHERE CUSTID = @CUSTOMERID;

	OPEN CUR_BAL;

	BEGIN
		FETCH NEXT FROM CUR_BAL INTO @ACCBAL;
		WHILE @@FETCH_STATUS = 0
			BEGIN
				SELECT @TOTALBAL = @TOTALBAL + @ACCBAL
				FETCH NEXT FROM CUR_BAL INTO @ACCBAL;
			END
	END

	CLOSE CUR_BAL;
	DEALLOCATE CUR_BAL;
	RETURN @TOTALBAL;
END

SELECT DBO.GETTOTALBAL(10001);


--   - Create a function to calculate the total interest to be paid on a loan.
CREATE OR ALTER FUNCTION TOTAL_INTEREST_ON_LOAN (@LOANID INT)
RETURNS MONEY
AS
BEGIN
	DECLARE @LOANINTEREST INT = 0;
	SELECT @LOANINTEREST = LOANINTEREST FROM LOANS WHERE LOANID = @LOANID;
	RETURN @LOANINTEREST;
END

SELECT DBO.TOTAL_INTEREST_ON_LOAN(40004)




--5. Triggers

--   - Create a trigger to update the account balance after a transaction is inserted.
CREATE OR ALTER TRIGGER TRG_TRANS_INSERT
ON TRANSACTIONS
AFTER INSERT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION

			DECLARE @ACCID INT, @TRANSAMT MONEY, @TRANSTYPE VARCHAR(10);
			DECLARE @SENDERACCID INT, @RECIEVERACCID INT;
			DECLARE @ACCBAL MONEY, @TRANSTAX MONEY;

			SELECT @ACCID = ACCID, @TRANSAMT = TRANSAMT, @TRANSTYPE = TRANSTYPE FROM INSERTED;

			--INSERT INTO TRANSACTIONS VALUES (@TRANSID,@ACCID,@TRANSTYPE,@TRANSAMT,GETDATE())
			--INSERT INTO TRANSACTIONS VALUES (@TRANSID+FLOOR(RAND()*(12345-2345+1)+2345),@RECIEVERACCID,'DEPOSIT',@TRANSAMT,GETDATE());

			IF @TRANSTYPE = 'DEPOSIT'
				BEGIN
					PRINT 'DEPOSIT'
					UPDATE ACCOUNTS SET ACCBAL = ACCBAL + @TRANSAMT WHERE ACCID = @ACCID;
				END

			ELSE IF @TRANSTYPE = 'WITHDRAWAL'
				BEGIN
					PRINT 'WITHDRAWAL'
					UPDATE ACCOUNTS SET ACCBAL = ACCBAL - @TRANSAMT WHERE ACCID = @ACCID;
				END


			--INSERT INTO TRANSACTIONS VALUES (@TRANSID,@SENDERACCID,'TRANSFER',@TRANSAMT,GETDATE());
			--ELSE IF @TRANSTYPE = 'TRANSFER'
				--BEGIN
				--	SELECT @SENDERACCID = ACC;
				--	PRINT 'TRANSFER'
				--	SELECT @ACCBAL = ACCBAL FROM ACCOUNTS WHERE ACCID = @SENDERACCID;

			   --     IF EXISTS (SELECT 1 FROM ACCOUNTBRANCHES WHERE BRANCHID = 
			   --                 (SELECT BRANCHID FROM ACCOUNTBRANCHES WHERE ACCID = @SENDERACCID) AND
			   --                 BRANCHID = (SELECT BRANCHID FROM ACCOUNTBRANCHES WHERE ACCID = @RECIEVERACCID))
						--BEGIN
						--	SET @TRANSTAX = 0;
						--END
			   --     ELSE
						--BEGIN
						--	SET @TRANSTAX = @TRANSAMT * 0.05;
						--END

					--IF @ACCBAL < @TRANSAMT 
					--BEGIN
					--	RAISERROR ('ERROR: INSUFFICIENT FUNDS ', 16, 1);
					--	ROLLBACK TRANSACTION;
					--	RETURN;
					--END
					
					--EXEC MAKE_PAYMENT @SENDERACCID, @RECIEVERACCID, @TRANSAMT;
				--END

			COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
    END CATCH
END;



--   - Create a trigger to prevent transactions if the account balance goes negative.
CREATE OR ALTER TRIGGER TRG_ACC_BAL_NEG
ON ACCOUNTS
INSTEAD OF UPDATE 
AS
BEGIN 
	BEGIN TRY
		--DECLARE @TRANSAMT MONEY , @ACCID INT ,@ACCBAL MONEY;
		--SELECT @TRANSAMT = TRANSAMT , @ACCID = ACCID FROM INSERTED;
		--SELECT @ACCBAL = ACCBAL FROM ACCOUNTS WHERE ACCID = @ACCID;
		--IF @ACCBAL < @TRANSAMT 
		--	BEGIN
		--		RAISERROR('ERROR : BALANCE INSUFIVENT',16,1);
		--		RETURN;
		--	END
		PRINT 'ACCBALAA'
		DECLARE @ACCBAL MONEY;
		SELECT @ACCBAL = ACCBAL FROM INSERTED
		IF @ACCBAL < 0
			BEGIN
				RAISERROR('ERROR : BALANCE INSUFIVENT',16,1);
				RETURN;
			END
	END TRY

	BEGIN CATCH
		SELECT ERROR_NUMBER() AS "ERROR NUMBER", ERROR_MESSAGE() AS "MESSAGE";
	END CATCH
END


BEGIN 
	DECLARE @TRANSID INT;
	EXEC PERFORM_TRANSACTION 10001,20001,'SAVINGS','DEPOSIT',20000,@TRANSID OUTPUT;
END

BEGIN
	DECLARE @TRANSID INT;
	EXEC TRANSFER_FUNDS 10003,20003,20001,10000,@TRANSID OUTPUT;
END



SELECT * FROM CUSTOMERS
SELECT * FROM ACCOUNTS
SELECT * FROM TRANSACTIONS
SELECT * FROM LOANS
SELECT * FROM BRANCH
SELECT * FROM ACCOUNTBRANCHES
SELECT * FROM COUNTERTABLE


DELETE FROM ACCOUNTBRANCHES
DELETE FROM TRANSACTIONS
DELETE FROM ACCOUNTS
DELETE FROM CUSTOMERS
DELETE FROM LOANS

BEGIN TRANSACTION
UPDATE COUNTERTABLE SET COUNTVALUE = 0 WHERE COUNTTYPE = 'ACCOUNT' OR COUNTTYPE ='CUSTOMER'
										OR COUNTTYPE ='TRANSACTION' OR COUNTTYPE ='ACCBRANCH'
										OR COUNTTYPE = 'LOAN' OR COUNTTYPE = 'BRANCH'
COMMIT TRANSACTION

--6. Views

--   - Create a view to display all customer details along with their account balances.
CREATE OR ALTER VIEW CUST_ACC_BAL AS SELECT CUSTOMERS.CUSTID , CUSTOMERS.CUSTNAME , CUSTOMERS.CUSTADDRESS , CUSTOMERS.CUSTEMAIL , ACCOUNTS.ACCID , ACCOUNTS.ACCBAL FROM CUSTOMERS 
LEFT OUTER JOIN ACCOUNTS ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID 
SELECT * FROM CUST_ACC_BAL

--   - Create a view to display all transactions for a given account.
CREATE OR ALTER VIEW CUST_ACC_TRANS AS SELECT * FROM TRANSACTIONS WHERE ACCID = 20001
SELECT * FROM CUST_ACC_TRANS

--   - Create a view to display all loans for a given customer.
CREATE OR ALTER VIEW CUST_LOANS AS SELECT * FROM LOANS WHERE CUSTID = 10001
SELECT * FROM CUST_LOANS

--===================================================================================================================

--Assignments based on the above project:

--1) Write a query to list all customers along with their account details, including account type and balance.
SELECT CUSTOMERS.CUSTID , CUSTOMERS.CUSTNAME , CUSTOMERS.CUSTADDRESS , CUSTOMERS.CUSTEMAIL , 
ACCOUNTS.ACCID , ACCOUNTS.ACCBAL , ACCOUNTS.ACCTYPE
FROM CUSTOMERS 
INNER JOIN ACCOUNTS ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID

--2) Write a query to list all transactions, including the customer name and account type associated with each transaction.
SELECT CUSTOMERS.CUSTID , CUSTOMERS.CUSTNAME ,ACCOUNTS.ACCID ,ACCOUNTS.ACCTYPE, TRANSACTIONS.TRANSID , TRANSACTIONS.TRANSAMT
FROM CUSTOMERS 
INNER JOIN ACCOUNTS ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID
INNER JOIN TRANSACTIONS ON ACCOUNTS.ACCID = TRANSACTIONS.ACCID

--3) Write a query to find all branches where customers have accounts, including the branch name and address.
SELECT BRANCH.BRANCHNAME , BRANCH.BRANCHADD , ACCOUNTBRANCHES.ACCID FROM BRANCH 
INNER JOIN ACCOUNTBRANCHES
ON BRANCH.BRANCHID = ACCOUNTBRANCHES.BRANCHID

--4) Write a query to find the total number of accounts each customer has.
SELECT COUNT(*) FROM ACCOUNTS GROUP BY CUSTID

--5) Write a query to list all customers who have made a transaction in the last month.
SELECT CUSTOMERS.CUSTNAME , CUSTOMERS.CUSTEMAIL , ACCOUNTS.ACCID FROM CUSTOMERS 
INNER JOIN ACCOUNTS
ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID
INNER JOIN TRANSACTIONS
ON ACCOUNTS.ACCID = TRANSACTIONS.ACCID
WHERE MONTH(TRANSACTIONS.TRANSDATE) = MONTH(GETDATE()) - 1

--6) Write a query to find all customers who have a balance greater than the average balance of all accounts. //
SELECT CUSTOMERS.CUSTNAME , CUSTOMERS.CUSTEMAIL , ACCOUNTS.ACCID FROM CUSTOMERS INNER JOIN ACCOUNTS 
ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID
WHERE ACCOUNTS.ACCBAL > (SELECT AVG(ACCBAL) FROM ACCOUNTS)



--7) Write a CTE to find the total balance of all accounts for each customer.
WITH TOT_BAL_ACC_CUST AS (
	SELECT CUSTID , SUM(ACCBAL) "SUM_BAL" FROM ACCOUNTS GROUP BY CUSTID
) SELECT CUSTOMERS.CUSTNAME , CUSTOMERS.CUSTADDRESS , TOT_BAL_ACC_CUST.SUM_BAL FROM CUSTOMERS INNER JOIN 
TOT_BAL_ACC_CUST ON CUSTOMERS.CUSTID = TOT_BAL_ACC_CUST.CUSTID


--8) Write a CTE to list all customers along with their loan details if they have any.
WITH CUST_LOAN AS (
	SELECT LOANID, CUSTID , LOANTYPE , LOANAMT , LOANINTEREST FROM LOANS
) SELECT CUSTOMERS.CUSTNAME , CUSTOMERS.CUSTEMAIL , CUST_LOAN.LOANAMT FROM CUSTOMERS
LEFT OUTER JOIN CUST_LOAN 
ON CUSTOMERS.CUSTID = CUST_LOAN.CUSTID 


--9) Write a CTE to find all branches with the total number of accounts opened in each branch.
WITH TOT_ACC_CUST AS (
	SELECT BRANCHID,COUNT(*)"TOTAL_ACC" FROM ACCOUNTBRANCHES GROUP BY BRANCHID
) SELECT * FROM TOT_ACC_CUST

--10) Write a query to rank customers based on the total balance of their accounts. // INCOMPLETE
SELECT SUM(ACCBAL) FROM ACCOUNTS GROUP BY CUSTID

SELECT SUM(ACCOUNTS.ACCBAL) "TOT_BAL"
FROM CUSTOMERS INNER JOIN ACCOUNTS
ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID
GROUP BY CUSTOMERS.CUSTID
ORDER BY TOT_BAL DESC

--11) Write a query to find the top 5 accounts with the highest balances.
SELECT TOP 5 ACCID FROM ACCOUNTS ORDER BY ACCBAL DESC

--12) Write a query to rank branches based on the total number of accounts opened in each branch.
SELECT BRANCHID,COUNT(*) "TOTAL_ACC" FROM ACCOUNTBRANCHES GROUP BY BRANCHID ORDER BY TOTAL_ACC DESC
 
--13) Write a query to find all customers who have taken out a loan and also have a savings account with a balance greater than 50,000.
SELECT CUSTOMERS.CUSTNAME , ACCOUNTS.ACCBAL , LOANS.LOANID , LOANS.LOANAMT FROM CUSTOMERS 
INNER JOIN ACCOUNTS ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID
INNER JOIN LOANS ON ACCOUNTS.CUSTID = LOANS.CUSTID
WHERE ACCOUNTS.ACCTYPE = 'SAVINGS' AND ACCOUNTS.ACCBAL > 50000

--14) Write a query to list all transactions where the customer has both a savings and a current account, and the transaction amount is more than 10000. // INCOMPLETE
SELECT TRANSACTIONS.TRANSID , TRANSACTIONS.TRANSAMT FROM ACCOUNTS
INNER JOIN TRANSACTIONS ON TRANSACTIONS.ACCID = ACCOUNTS.ACCID
WHERE ACCOUNTS.ACCTYPE = 'CURRENT' AND TRANSACTIONS.TRANSAMT > 10000

--15) Write a query to list all branches and the number of customers who have accounts at each branch, including those branches with zero customers.
SELECT BRANCH.BRANCHID , ACCOUNTBRANCHES.ACCID FROM BRANCH
INNER JOIN ACCOUNTBRANCHES ON BRANCH.BRANCHID = ACCOUNTBRANCHES.BRANCHID

--16) Write a query to list all customers who have made more than 10 transactions in any given month.
SELECT CUSTOMERS.CUSTID , COUNT(TRANSACTIONS.TRANSID) "TOT_TRANS" FROM CUSTOMERS 
INNER JOIN ACCOUNTS ON CUSTOMERS.CUSTID = ACCOUNTS.CUSTID
INNER JOIN TRANSACTIONS ON ACCOUNTS.ACCID = TRANSACTIONS.ACCID
WHERE MONTH(TRANSACTIONS.TRANSDATE) = 8
GROUP BY CUSTOMERS.CUSTID
HAVING  COUNT(TRANSACTIONS.TRANSID) > 10


select * from customers where custname like 'a%a'
